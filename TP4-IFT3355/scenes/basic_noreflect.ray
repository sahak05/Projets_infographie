
# Spécifie les dimensions de sortie.
Dimensions 640 480

# Comme gluPerspective.
Perspective 30.0 1.33 3 20

# Comme gluLookAt.
LookAt  1.2434  1.2533  9.8429 # position de l'oeil
        0.6500  0.3000 -0.9843 # position du focus
       -0.0157  0.9921 -0.1243 # vecteur up

# Spécifications d'un matériau :
# La syntaxe basique est `Material "name"`, suivi de paires de clé (string) et de
# nombres (ou liste de nombres). La classe Material est responsable de la récupération
# des valeurs de la liste de paramètre. Toute valeur omise sera supposée égale à 0.

# Un rouge très réfléchissant
Material "red"
    "ambient"   [1.0 0.0 0.0]
    "diffuse"   [1.0 0.0 0.0]
    "specular"  [1.0 1.0 1.0]
    "emission"  [0.0 0.0 0.0]
    "shininess" 500.0 # exposant spéculaire
    "reflect"   0.0   # facteur de reflection [0 = aucune reflection, 1 = reflection totale, 0..1 ajouté à la couleur de la surface]

# Sarcelle brillante modérément réfléchissante
Material "teal"
    "ambient"   [0.0 1.0 1.0]
    "diffuse"   [0.0 1.0 1.0]
    "specular"  [1.0 1.0 1.0]
    "emission"  [0.0 0.0 0.0]
    "shininess" 80.0
    "reflect"   0.0

# Bleu diffus
Material "blue"
    "ambient"   [0.0 0.0 1.0]
    "diffuse"   [0.0 0.0 1.0]
    "specular"  [0.1 0.1 0.1]
    "emission"  [0.0 0.0 0.0]
    "shininess" 10.0
    "reflect"   0

# Jaune un peu brillant
Material "yellow"
    "ambient"   [1.0 1.0 0.0]
    "diffuse"   [1.0 1.0 0.0]
    "specular"  [1.0 1.0 1.0]
    "emission"  [0.0 0.0 0.0]
    "shininess" 50.0
    "reflect"   0

# Vert un peu brillant.
Material "green"
    "ambient"   [0.0 1.0 0.0]
    "diffuse"   [0.0 1.0 0.0]
    "specular"  [0.5 0.5 0.5]
    "emission"  [0.0 0.0 0.0]
    "shininess" 20.0
    "reflect"   0

# Blanc très diffus
Material "white"
    "ambient"   [0.1 0.1 0.1]
    "diffuse"   [2.0 2.0 2.0]
    "specular"  [0 0 0]
    "emission"  [0 0 0]
    "shininess" 0.0
    "reflect"   0.0


# Transformations :
# `PushMatrix`, `PopMatrix`, `Translate`, `Rotate`, et `Scale` fonctionne comme leur
# OpenGL homologues.

# Spécifications d'un objet :
# Sphere radius "material"
# Plane "material"

PushMatrix
    Translate 2.5 0.5 -1.0
    Rotate 40 0 1 0
    Scale 1 5 5
    Sphere 0.5 "red"
PopMatrix

PushMatrix
    Translate -1.0 0.75 -1.75
    Sphere 1.75 "teal"
PopMatrix

PushMatrix
    Translate 0.5 -0.75 0.25
    Sphere 0.5 "blue"
PopMatrix

# Sol
PushMatrix
    Translate 0 -1.25 0
    Rotate -90 1 0 0
    Plane "white"
PopMatrix


# Des objets au maillage triangulaire peuvent également être spécifiés.
# Pour charger un maillage à partir d'un fichier .OBJ, la spécification suivante est utilisée :
# Mesh "material" "chemin/vers/fichier.obj"
PushMatrix
    Translate -1.25 1.75 2.25
    Scale 0.4 0.4 0.4
    Rotate 90 0 1 0
    Mesh "green" "meshes/icosahedron.obj"
PopMatrix

# Vous pouvez aussi spécifier des maillages comme suit :
# Mesh "material" [numFaces] [list of position indices] "P" [
#   list
#   of
#   vertex
#   positions
# ]
PushMatrix
    Translate 1.75 -1.25 2.5
    Rotate -45 1 0 0
    #Rotate -10 0 1 0
    Mesh "yellow" [3] [0 1 2] "P" [
        0 0 0
        1 0 0
        0 1 0
    ]
PopMatrix


# Bien que non implémenté dans la solution d'exemple,
# l'analyseur peut aussi gérer les coniques (optionnel) :
#Conic 0 0.5 -1 1 "blue" # `Conic radius1 radius2 zMin zMax "material"`


# Spécification pour une source d elumière :
# La syntaxe basique est `PointLight x y z`, suivi par une liste de paramètres
# (à partir de laquelle la classe PointLight récupère ses valeurs).

PointLight 2 10 2            # position [x y z]
    "ambient"     [0.1 0.1 0.1]    # couleur ambiante [r g b]
    "diffuse"     [8.0 8.0 12.0]   # couleur diffuse
    "specular"    [20.0 20.0 20.0] # couleur speculaire
    "attenuation" [1.8 3.0 0.0]    # attenuation [constant linear square]

PointLight 10 10 15 
    "ambient"     [0.1 0.1 0.1]
    "diffuse"     [9.0 9.0 3.0]
    "specular"    [20.0 20.0 20.0]
    "attenuation" [1.8 3.0 0.0]





